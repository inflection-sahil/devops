locals {

  aws_region = "ap-south-1"

  # vpc properties
  vpc-properties = {
    availability-zones = [
      "ap-south-1a",
      "ap-south-1b",
      "ap-south-1c"
    ]
    vpc-cidr-block = "10.0.0.0/16"
    vpc-subnet-count = {
      "public"  = 2,
      "private" = 2
    }
    vpc-public-subnet-cidr-blocks = [
      "10.0.1.0/24",
      "10.0.2.0/24",
      "10.0.3.0/24",
      "10.0.4.0/24"
    ]
    vpc-private-subnet-cidr-blocks = [
      "10.0.101.0/24",
      "10.0.102.0/24",
      "10.0.103.0/24",
      "10.0.104.0/24"
    ]

    vpc-tag-value                = "ecs-vpc"
    vpc-public-subnet-tag-value  = "ecs-public-vpc"
    vpc-private-subnet-tag-value = "ecs-private-vpc"
    vpc-igw-tag-value            = "ecs-igw"
  }

  vpc-id              = module.vpc.vpc-id
  vpc-public-subnets  = module.vpc.vpc-public-subnets
  vpc-private-subnets = module.vpc.vpc-private-subnets

  # s3 properties
  s3-properties = {
    s3-bucket-name          = "s3-bucket"
    s3-bucket-force-destroy = true
    s3-bucket-versioning    = "Disabled"
  }
  s3-bucket-id = module.s3.s3-bucket-id

  # rds properties
  rds-properties = {
    db-identifier          = "ecs-db"
    db-allocated-storage   = 20
    db-engine              = "mysql"
    db-engine-version      = "8.0.35"
    db-instance-class      = "db.t3.micro"
    db-skip-final-snapshot = true
    db-publicly-accessible = false

    db-username = ""
    db-password = ""

    db-sg-tag-value = "ecs-db-sg"
  }

  # bastion host properties
  bastion-host-properties = {
    bastion-host-instance-type = "t2.micro"
    bastion-host-public-key    = "~/.ssh/bastion-key.pub"

    bastion-host-sg-tag-value = "ecs-bastion-host"
    bastion-host-tag-value    = "ecs-bastion-host"
  }

  # load balancer properties
  load-balancer-properties = {
    load-balancer-name    = "ecs-lb"
    load-balancer-type    = "application"
    load-balancer-tg-name = "ecs-lb-tg"
    port                  = "${local.ecs-properties.ecs-container-port}"

    load-balancer-sg-tag-value = "ecs-load-balancer-sg"
  }

  load-balancer-tg-arn = module.load-balancer.load-balancer-tg-arn
  load-balancer-sg-id  = module.load-balancer.load-balancer-sg-id

  # ecr properties
  ecr-properties = {
    ecr-repository-name         = "ecsecr"
    ecr-repository-force-delete = true

    ecr-public-repository-name          = "ecsecr"
    ecr-public-repository-force-destroy = true
  }
  # ecr-repository-url  = module.ecr-repository.repository-url
  dockerhub-repository-url = ""

  # ecs properties
  ecs-properties = {
    ecs-cluster-name             = "ecs-cluster"
    ecs-task-execution-role-name = "ecs-task-execution-role"
    ecs-task-family              = "ecs-task-family"
    ecs-task-name                = "ecs-task"
    ecs-container-image          = "${local.dockerhub-repository-url}"
    ecs-container-name           = "app-service"
    ecs-container-port           = ""
    s3-config-bucket             = "${local.s3-properties.s3-bucket-name}"
    s3-config-path               = ""
    ecs-service-name             = "ecs-service"

    ecs-service-sg-tag-value = "ecs-service-sg"
  }

  ecs-container-definition = <<DEFINITION
    [
      {
        "name": "${local.ecs-properties.ecs-container-name}",
        "image": "${local.ecs-properties.ecs-container-image}",
        "cpu": 512,
        "memory": 1024,
        "essential": true,
        "portMappings": [
          {
            "containerPort": ${local.ecs-properties.ecs-container-port},
            "hostPort": ${local.ecs-properties.ecs-container-port}
          }
        ],
        "environment": [
          {
            "name": "S3_CONFIG_BUCKET",
            "value": "${local.ecs-properties.s3-config-bucket}"
          },
          {
            "name": "S3_CONFIG_PATH",
            "value": "${local.ecs-properties.s3-config-path}"
          }
        ]
      }
    ]
    DEFINITION
}